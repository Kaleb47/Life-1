{"message":"unused import: `ops::Add`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":45,"byte_end":53,"line_start":1,"line_end":1,"column_start":46,"column_end":54,"is_primary":true,"text":[{"text":"use std::{collections::{ HashSet, HashMap }, ops::Add};","highlight_start":46,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":43,"byte_end":53,"line_start":1,"line_end":1,"column_start":44,"column_end":54,"is_primary":true,"text":[{"text":"use std::{collections::{ HashSet, HashMap }, ops::Add};","highlight_start":44,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `ops::Add`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:46\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::{collections::{ HashSet, HashMap }, ops::Add};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"`main` function not found in crate `my_project`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":1735,"line_start":1,"line_end":62,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"use std::{collections::{ HashSet, HashMap }, ops::Add};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(PartialEq, Eq, Hash)]","highlight_start":1,"highlight_end":31},{"text":"struct Cell {","highlight_start":1,"highlight_end":14},{"text":"    x: i64,","highlight_start":1,"highlight_end":12},{"text":"    y: i64,","highlight_start":1,"highlight_end":12},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"const LIVE_RULES: [i8; 2] = [2, 3];","highlight_start":1,"highlight_end":36},{"text":"const SPAWN_RULES: [i8; 1] = [3];","highlight_start":1,"highlight_end":34},{"text":"const OFFSETS: [Cell; 8] = [","highlight_start":1,"highlight_end":29},{"text":"    Cell{x:-1, y:1}, Cell{x:0, y:1}, Cell{x:1, y:1},","highlight_start":1,"highlight_end":53},{"text":"    Cell{x:-1, y:0},                 Cell{x:1, y:0},","highlight_start":1,"highlight_end":53},{"text":"    Cell{x:-1,y:-1}, Cell{x:0,y:-1}, Cell{x:1,y:-1}","highlight_start":1,"highlight_end":52},{"text":"];","highlight_start":1,"highlight_end":3},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub struct GameOfLife {","highlight_start":1,"highlight_end":24},{"text":"    living_cells: HashSet<Cell>","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl GameOfLife {","highlight_start":1,"highlight_end":18},{"text":"    fn living_neighbors(cell: Cell) -> Vec<Cell> {","highlight_start":1,"highlight_end":51},{"text":"        let mut neighbors = Vec::new();","highlight_start":1,"highlight_end":40},{"text":"        for offset in OFFSETS {","highlight_start":1,"highlight_end":32},{"text":"            let neighbor = Cell{","highlight_start":1,"highlight_end":33},{"text":"                x: cell.x + offset.x,","highlight_start":1,"highlight_end":38},{"text":"                y: cell.y + offset.y,","highlight_start":1,"highlight_end":38},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            neighbors.push(neighbor);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        neighbors","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn evolve(&mut self) {","highlight_start":1,"highlight_end":31},{"text":"        let mut hopefuls: HashMap<Cell, i8> = HashMap::new();","highlight_start":1,"highlight_end":62},{"text":"        let mut next_state: HashSet<Cell> = HashSet::new();","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for cell in &self.living_cells {","highlight_start":1,"highlight_end":41},{"text":"            let mut neighbors_alive: i8 = 0;","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            for offset in OFFSETS {","highlight_start":1,"highlight_end":36},{"text":"                let poss = Cell{x: cell.x + offset.x, y: cell.y + offset.y};","highlight_start":1,"highlight_end":77},{"text":"                if self.living_cells.contains(&poss) {","highlight_start":1,"highlight_end":55},{"text":"                    neighbors_alive += 1;","highlight_start":1,"highlight_end":42},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    *hopefuls.entry(poss).or_insert(0) += 1;","highlight_start":1,"highlight_end":61},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            if LIVE_RULES.contains(&neighbors_alive) {","highlight_start":1,"highlight_end":55},{"text":"                next_state.insert(Cell{x:cell.x, y:cell.y});","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        for cell in hopefuls.keys() {","highlight_start":1,"highlight_end":38},{"text":"            if SPAWN_RULES.contains(hopefuls.get(cell).unwrap()) {","highlight_start":1,"highlight_end":67},{"text":"                next_state.insert(Cell{x:cell.x, y:cell.y});","highlight_start":1,"highlight_end":61},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        self.living_cells = next_state;","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `my_project`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{collections::{ HashSet, HashMap }, ops::Add};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(PartialEq, Eq, Hash)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct Cell {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
